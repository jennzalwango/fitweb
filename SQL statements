CREATE TABLE CUSTOMER (
  CUSTOMER_ID INT(23) PRIMARY KEY AUTO_INCREMENT, 
  CUSTOMER_NAME VARCHAR(255) NOT NULL, 
  CUSTOMER_ADDRESS VARCHAR(255),
  CUSTOMER_EMAIL VARCHAR(255)
  )

CREATE TABLE PRODUCT(
  PRODUCT_ID INT PRIMARY KEY AUTO_INCREMENT,
  PRODUCT_NAME VARCHAR(255) NOT NULL,
  PRODUCT_PRICE VARCHAR(255
  CONSTRAINT CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) 
    REFERENCES CUSTOMER (CUSTOMER_ID)
)

CREATE TABLE STUDENT(
  STUDENT_ID INT(23) NOT NULL UNIQUE AUTO_INCREMENT, 
  STUDENT_NAME VARCHAR(255),
  STUDENT_EMAIL VARCHAR(255),
  STUDENT_COURSE VARCHAR(255) DEFAULT "BSC.COMPUTING"
  STUDENT_AGE INT CHECK(STUDENT_AGE >= 18)
  COURSE_ID_FK INT,
  CONSTRAINT COURSE_ID FOREIGN KEY (COURSE_ID_FK) 
    REFERENCES COURSE(COURSE_ID)
)

CREATE TABLE COURSE (
  COURSE_ID INT PRIMARY KEY AUTO_INCREMENT,
  COURSE_NAME VARCHAR(255),
  STUDENT_ID_FK INT,
  CONSTRAINT STUDENT_ID FOREIGN KEY (STUDENT_ID_FK) 
    REFERENCES STUDENT(STUDENT_ID)
)

CREATE TABLE STUDENT_COURSE(
  CONSTRAINT STUDENT_ID FOREIGN KEY (STUDENT_ID) 
    REFERENCES STUDENT(STUDENT_ID),
  CONSTRAINT COURSE_ID FOREIGN KEY(COURSE_ID) 
    REFERENCES COURSE (COURSE_ID)
)


--- For creating the composite key, PRODUCT_ID_PK = ORDER_ID, PRODUCT_ID
CREATE TABLE PRODUCT (
    ORDER_ID INT,
    PRODUCT_ID INT,
    PRICE INT,
    BRAND VARCHAR(100),
	CONSTRAINT PRODUCT_ID_PK PRIMARY KEY(ORDER_ID, PRODUCT_ID)
);

--- INSERT Values in this data
INSERT INTO PRODUCT(ORDER_ID, PRODUCT_ID, PRICE, BRAND) 
VALUES
(3, 4, 4000, 'APPLE'),
(5, 8, 2000, 'APPLE'),
(4, 3, 2000, 'APPLE'),
(7, 9, 2000, 'APPLE'),
(9, 4, 2000, 'APPLE')
    

--Create a juntion, table, it is used to break down tables that have many to many relations

---ENGINE=INNODB; used to make the querying of data from the database faster--->
--- Wwhat is the difference  ,
---Method 1 can l still use the DROP CONSTRAINT column_name? or use the ALTER